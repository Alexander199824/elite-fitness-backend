/**
 * SERVIDOR PRINCIPAL - ELITE FITNESS CLUB
 * 
 * Soy el punto de entrada principal del sistema
 * Mi responsabilidad es inicializar el servidor, conectar a la base de datos
 * y manejar el ciclo de vida de la aplicaci√≥n de forma segura
 * 
 * Funcionalidades actuales:
 * - Inicializaci√≥n segura del servidor
 * - Conexi√≥n a PostgreSQL
 * - Manejo de se√±ales del sistema
 * - Logging de estado del servidor
 */

require('dotenv').config();
const app = require('./app');
const { testConnection, closeConnection } = require('./config/database');

// Configuraci√≥n del puerto
const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || 'localhost';

// Variable para almacenar la instancia del servidor
let server;

/**
 * Funci√≥n para inicializar el servidor de forma segura
 */
const startServer = async () => {
  try {
    console.log('üöÄ Iniciando Elite Fitness Club Backend...');
    console.log(`üìç Entorno: ${process.env.NODE_ENV || 'development'}`);
    
    // Verificar conexi√≥n a base de datos
    console.log('üîó Verificando conexi√≥n a base de datos...');
    const dbConnected = await testConnection();
    
    if (!dbConnected) {
      console.error('‚ùå No se pudo conectar a la base de datos');
      console.error('üí° Verifica tu archivo .env y que PostgreSQL est√© ejecut√°ndose');
      process.exit(1);
    }
    
    // Cargar y validar modelos de Fase 2
    console.log('üìä Cargando modelos de base de datos...');
    try {
      const { validateModels, models } = require('./models');
      validateModels();
      const modelNames = Object.keys(models);
      console.log(`‚úÖ Modelos de Fase 2 cargados correctamente: ${modelNames.join(', ')}`);
      console.log(`üìà Total de modelos registrados: ${modelNames.length}`);
    } catch (error) {
      console.log('‚ö†Ô∏è  Modelos de Fase 2 no disponibles:', error.message);
      console.log('üí° Ejecuta migraci√≥n para crear las tablas: npm run migrate');
    }
    
    // Iniciar servidor HTTP
    server = app.listen(PORT, HOST, () => {
      console.log('‚úÖ Servidor iniciado exitosamente');
      console.log(`üåê URL: http://${HOST}:${PORT}`);
      console.log(`üè• Health Check: http://${HOST}:${PORT}/health`);
      console.log(`üíæ DB Status: http://${HOST}:${PORT}/api/db-status`);
      console.log('==========================================');
      
      // Detectar fase seg√∫n modelos disponibles
      try {
        const { models } = require('./models');
        const hasModels = Object.keys(models).length > 0;
        
        if (hasModels) {
          console.log('üí™ Elite Fitness Club Backend - Fase 2.1');
          console.log('üîß Modelos de Base de Datos Completados');
          console.log('‚è≠Ô∏è  Listo para Sub-fase 2.2: JWT y OAuth');
        } else {
          console.log('üí™ Elite Fitness Club Backend - Fase 1');
          console.log('üîß Configuraci√≥n Base Completada');
          console.log('‚è≠Ô∏è  Listo para Fase 2: Autenticaci√≥n');
        }
      } catch (error) {
        console.log('üí™ Elite Fitness Club Backend - Fase 1');
        console.log('üîß Configuraci√≥n Base Completada');
        console.log('‚è≠Ô∏è  Listo para Fase 2: Autenticaci√≥n');
      }
      
      console.log('==========================================');
    });
    
    // Configurar timeout del servidor
    server.timeout = 30000; // 30 segundos
    
  } catch (error) {
    console.error('üí• Error cr√≠tico iniciando servidor:', error.message);
    process.exit(1);
  }
};

/**
 * Funci√≥n para cerrar el servidor de forma segura
 */
const gracefulShutdown = async (signal) => {
  console.log(`\nüõë Se√±al ${signal} recibida. Cerrando servidor...`);
  
  try {
    // Cerrar servidor HTTP
    if (server) {
      await new Promise((resolve) => {
        server.close(resolve);
      });
      console.log('üîí Servidor HTTP cerrado');
    }
    
    // Cerrar conexi√≥n a base de datos
    await closeConnection();
    
    console.log('‚úÖ Cierre exitoso del sistema');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Error durante el cierre:', error.message);
    process.exit(1);
  }
};

/**
 * Manejo de errores no capturados
 */
process.on('uncaughtException', (error) => {
  console.error('üí• Excepci√≥n no capturada:', error);
  console.error('üìç Stack:', error.stack);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Promise rechazada no manejada:', reason);
  console.error('üìç Promise:', promise);
  process.exit(1);
});

/**
 * Manejo de se√±ales del sistema para cierre seguro
 */
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// En Windows
process.on('SIGBREAK', () => gracefulShutdown('SIGBREAK'));

/**
 * Inicializar servidor solo si no est√° siendo importado
 */
if (require.main === module) {
  startServer();
}

module.exports = { app, startServer, gracefulShutdown };

/**
 * ESTADO ACTUAL - FASE 2.1:
 * ‚úÖ Servidor Express configurado y funcional
 * ‚úÖ Conexi√≥n a PostgreSQL verificada
 * ‚úÖ Modelos de base de datos cargados autom√°ticamente
 * ‚úÖ Manejo seguro de cierre del servidor
 * ‚úÖ Error handling para excepciones no capturadas
 * ‚úÖ Logging detallado del estado del sistema
 * ‚úÖ Configuraci√≥n para m√∫ltiples entornos
 * ‚úÖ Detecci√≥n autom√°tica de fase seg√∫n modelos disponibles
 * 
 * PENDIENTE PARA SIGUIENTES SUB-FASES:
 * ‚è≥ Utilidades JWT y OAuth (Sub-fase 2.2)
 * ‚è≥ Middleware de autenticaci√≥n (Sub-fase 2.3)
 * ‚è≥ Controladores de autenticaci√≥n (Sub-fase 2.4)
 * ‚è≥ Rutas protegidas (Sub-fase 2.5)
 * ‚è≥ Testing completo de autenticaci√≥n (Sub-fase 2.6)
 */